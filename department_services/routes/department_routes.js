const express = require('express');
const router = express.Router();
const Department = require('../model/model_department');
const axios = require('axios'); // Th√™m axios ƒë·ªÉ th·ª±c hi·ªán HTTP request

// üìå Healthcheck Endpoint
router.get('/healthz', async (req, res) => {
  let dbStatus = "ok";

  // Ki·ªÉm tra k·∫øt n·ªëi Database (MongoDB)
  try {
    await mongoose.connection.db.admin().ping();
  } catch (error) {
    console.error("L·ªói k·∫øt n·ªëi Database:", error);
    dbStatus = "unhealthy";
  }

  // üìå L·∫•y th√¥ng tin CPU & RAM Usage
  const cpuUsage = os.loadavg()[0]; // CPU Load trung b√¨nh trong 1 ph√∫t
  const memoryUsage = process.memoryUsage().rss / (1024 * 1024); // RAM s·ª≠ d·ª•ng (MB)

  // üìå L·∫•y CPU & RAM c·ª• th·ªÉ c·ªßa process n√†y (service)
  let processStats;
  try {
    processStats = await psutil(process.pid);
  } catch (error) {
    console.error("L·ªói khi l·∫•y CPU/RAM process:", error);
    processStats = { cpu: 0, memory: 0 };
  }

  const status = {
    authentication_service: "ok",
    database: dbStatus,
    system_cpu_load: cpuUsage.toFixed(2) + " %",
    system_memory_used: memoryUsage.toFixed(2) + " MB",
    process_cpu: processStats.cpu.toFixed(2) + " %",
    process_memory: (processStats.memory / (1024 * 1024)).toFixed(2) + " MB"
  };

  // N·∫øu Database l·ªói, tr·∫£ v·ªÅ HTTP 503
  if (dbStatus !== "ok") {
    return res.status(503).json(status);
  }
  
  res.json(status);
});
// POST th√™m ph√≤ng ban m·ªõi
router.post('/', async (req, res, next) => {
  const { loaiPhong, Manager, roomnumber } = req.body;

  // X√°c th·ª±c d·ªØ li·ªáu ƒë·∫ßu v√†o
  if (!loaiPhong && !Manager && !roomnumber) {
    return res.status(400).json({ message: 'Lo·∫°i ph√≤ng ban l√† b·∫Øt bu·ªôc.' });
  }

  try {
  
    
  
    // T·∫°o ph√≤ng ban m·ªõi v·ªõi loaiPhong v√† SoLuongNV
    const newDepartment = new Department({
      loaiPhong,
      Manager,
      roomnumber
    });

    // L∆∞u ph√≤ng ban v√†o c∆° s·ªü d·ªØ li·ªáu
    const department = await newDepartment.save();

    res.status(201).json(department); // Tr·∫£ v·ªÅ th√¥ng tin ph√≤ng ban m·ªõi t·∫°o
  } catch (error) {
    console.error('L·ªói khi g·ªçi employee_services:', error.message);
    next(error); // G·ªçi middleware x·ª≠ l√Ω l·ªói
  }
});

// Route ƒë·ªÉ l·∫•y danh s√°ch ph√≤ng ban
router.get('/', async (req, res) => {
  try {
    const departments = await Department.find(); // L·∫•y danh s√°ch t·ª´ c∆° s·ªü d·ªØ li·ªáu
    res.json(departments);
  } catch (error) {
    res.status(500).json({ message: 'L·ªói l·∫•y danh s√°ch ph√≤ng ban.' });
  }
});
//

  // Route ƒë·ªÉ l·∫•y danh s√°ch nh√¢n vi√™n theo ph√≤ng ban
  router.get('/employees', async (req, res) => {
    const { department } = req.query; // L·∫•y lo·∫°i ph√≤ng ban t·ª´ query string

    // X√°c th·ª±c ƒë·∫ßu v√†o
    if (!department) {
      return res.status(400).json({ message: 'Ph√≤ng ban (department) l√† b·∫Øt bu·ªôc.' });
    }

    const EmployeeApiUrl = 'http://localhost:3001';

    try {
      // G·ª≠i y√™u c·∫ßu ƒë·∫øn employee_services ƒë·ªÉ l·∫•y danh s√°ch nh√¢n vi√™n
      const response = await axios.get(`${EmployeeApiUrl}/employees/position?department=${department}`);
      const employees = response.data;  

      if (employees.length === 0) {
        return res.status(404).json({ message: 'Kh√¥ng c√≥ nh√¢n vi√™n n√†o thu·ªôc ph√≤ng ban n√†y.' });
      }

      // Tr·∫£ v·ªÅ danh s√°ch nh√¢n vi√™n
      res.status(200).json(employees);
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch nh√¢n vi√™n:', error.message);
      res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch nh√¢n vi√™n.' });
    }
  });
//
// API ƒë·ªÉ ki·ªÉm tra xem ph√≤ng ban c√≥ t·ªìn t·∫°i kh√¥ng
router.get('/check', async (req, res) => {
  const { position } = req.query; // L·∫•y gi√° tr·ªã position t·ª´ query parameters

  try {
    // T√¨m c√°c ph√≤ng ban theo position (ho·∫∑c t√™n ph√≤ng ban)
    const departmentExists = await Department.findOne({ loaiPhong: position }); // L·ªçc theo name c·ªßa ph√≤ng ban

    if (departmentExists) {
      return res.status(200).json({ exists: true, message: 'Department exists.' });
    } else {
      return res.status(200).json({ exists: false, message: 'Department does not exist.' });
    }
  } catch (error) {
    // X·ª≠ l√Ω l·ªói trong qu√° tr√¨nh truy v·∫•n
    return res.status(500).json({ message: 'Internal Server Error', error: error.message });
  }
});
module.exports = router; // Xu·∫•t router ƒë·ªÉ s·ª≠ d·ª•ng trong app.js
