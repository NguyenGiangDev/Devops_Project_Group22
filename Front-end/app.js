const express = require('express');
const axios = require('axios');
require('dotenv').config(); // N·∫°p bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env
const cookieParser = require('cookie-parser');
const app = express();
const PORT = process.env.PORT || 3000; // C·ªïng frontend
const path = require('path');
const { collectDefaultMetrics, Registry, Counter } = require('prom-client');

// Middleware ƒë·ªÉ parse d·ªØ li·ªáu t·ª´ bi·ªÉu m·∫´u
app.use(express.json()); // ƒê·ªÉ x·ª≠ l√Ω c√°c y√™u c·∫ßu c√≥ body d∆∞·ªõi d·∫°ng JSON
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));
app.use(cookieParser()); // S·ª≠ d·ª•ng cookie-parser

// URL c·ªßa c√°c d·ªãch v·ª• kh√°c (l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c m·∫∑c ƒë·ªãnh)
const EMPLOYEE_API_URL = process.env.EMPLOYEE_API_URL || 'http://employee-services:3001';
const DEPARTMENT_API_URL = process.env.DEPARTMENT_API_URL || 'http://department-services:3002';
const AUTHENTICATION_API_URL = process.env.AUTHENTICATION_API_URL || 'http://authentication-services:3003';
const PERSONAL_API_URL = process.env.PERSONAL_API_URL || 'http://personal-services:3004';
const SALARY_API_URL = process.env.SALARY_API_URL || 'http://salary-services:3005';


// T·ª± ƒë·ªông thu th·∫≠p c√°c metric m·∫∑c ƒë·ªãnh
collectDefaultMetrics();

// T·∫°o m·ªôt Counter ƒë·ªÉ ƒë·∫øm s·ªë l∆∞·ª£ng ƒëƒÉng nh·∫≠p th√†nh c√¥ng
const loginCounter = new Counter({
  name: 'login_attempts_total',
  help: 'Total number of login attempts',
  labelNames: ['status'], // G·∫Øn nh√£n ƒë·ªÉ ph√¢n bi·ªát ƒëƒÉng nh·∫≠p th√†nh c√¥ng/th·∫•t b·∫°i
});

// Route thu th·∫≠p metric
app.get('/metrics', async (req, res) => {
  try {
    res.set('Content-Type', 'text/plain; version=0.0.4');
    res.end(await Registry.globalRegistry.metrics());
  } catch (err) {
    res.status(500).send(err.message);
  }
});

// üìå Healthcheck Endpoint
app.get('/healthz', async (req, res) => {
  const services = {
    employee_service: `${EMPLOYEE_API_URL}/healthz`,
    department_service: `${DEPARTMENT_API_URL}/healthz`,
    authentication_service: `${AUTHENTICATION_API_URL}/healthz`
  };

  let status = { api_gateway: "ok" }; // API Gateway lu√¥n tr·∫£ v·ªÅ OK n·∫øu ch·∫°y
  let unhealthyServices = [];

  for (const [name, url] of Object.entries(services)) {
    try {
      const response = await axios.get(url, { timeout: 2000 }); // Timeout 2s
      status[name] = response.data.status;
      if (response.data.status !== "ok") {
        unhealthyServices.push(name);
      }
    } catch {
      status[name] = "unhealthy";
      unhealthyServices.push(name);
    }
  }

  if (unhealthyServices.length > 0) {
    return res.status(503).json(status); // Tr·∫£ v·ªÅ 503 n·∫øu c√≥ service b·ªã l·ªói
  }
  res.json(status);
});
// Route ƒë·ªÉ l·∫•y danh s√°ch nh√¢n vi√™n
app.get('/api/employees', (req, res) => {
  axios.get(`${EMPLOYEE_API_URL}/employees`)
    .then(response => {
      res.json(response.data); // Tr·∫£ v·ªÅ d·ªØ li·ªáu danh s√°ch nh√¢n vi√™n
    })
    .catch(error => {
      console.error('Error fetching employee data:', error);
      res.status(500).send('Error fetching employee data');
    });
});

// Th√™m nh√¢n vi√™n
app.post('/api/employees', async (req, res) => {
  const employeeData = req.body; // L·∫•y d·ªØ li·ªáu t·ª´ bi·ªÉu m·∫´u nh√¢n vi√™n

  try {
    const response = await axios.post(`${EMPLOYEE_API_URL}/employees`, employeeData);

    const successMessage = 'Employee added successfully!';
    const errorMessage = 'Ph√≤ng ban kh√¥ng t·ªìn t·∫°i';
    const unexpectedMessage = 'Employee added successfully';

    // Ki·ªÉm tra th√¥ng b√°o t·ª´ backend
    if (response.data.message?.includes('Department exists')) {
      return res.redirect('/add_employ.html?message=' + encodeURIComponent(successMessage));
      
    } else if (response.data.message?.includes('Department does not exist')) {
      return res.redirect('/add_employ.html?error=' + encodeURIComponent(errorMessage));
    } else {
     return res.redirect('/add_employ.html?error=' + encodeURIComponent(unexpectedMessage));
    }
  } catch (error) {
    console.error('Error adding employee:', error);

    let generalErrorMessage = 'Failed to connect to the employee service';
    if (error.response?.data?.message?.includes('Department does not exist')) {
      generalErrorMessage = 'Ph√≤ng ban kh√¥ng t·ªìn t·∫°i';
    }

    return res.redirect('/add_employ.html?error=' + encodeURIComponent(generalErrorMessage));
  }
});


// Route ƒë·ªÉ th√™m ph√≤ng ban
app.post('/api/department', (req, res) => {
  const departmentData = req.body;

  axios.post(`${DEPARTMENT_API_URL}/department`, departmentData)
    .then(response => {
      const successMessage = 'Department added successfully!';
      res.redirect('/Department_add.html?message=' + encodeURIComponent(successMessage));
    })
    .catch(error => {
      console.error('Error adding department:', error);
      res.status(500).json({ error: 'Failed to add department' });
    });
});

// Route ƒë·ªÉ l·∫•y danh s√°ch ph√≤ng ban
app.get('/api/department', (req, res) => {
  axios.get(`${DEPARTMENT_API_URL}/department`)
    .then(response => {
      res.json(response.data);
    })
    .catch(error => {
      console.error('Error fetching department data:', error);
      res.status(500).send('Error fetching department data');
    });
});

// Route cho trang ch√≠nh, hi·ªÉn th·ªã form th√™m ph√≤ng ban
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'Authentication.html'));
});

// Route ƒë·ªÉ l·∫•y nh√¢n vi√™n theo ph√≤ng ban
app.post('/api/department/employee', (req, res) => {
  const departmentName = req.body.loaiPhong;

  axios.get(`${DEPARTMENT_API_URL}/department/employees?department=${departmentName}`)
    .then(response => {
      res.json(response.data);
    })
    .catch(error => {
      console.error('Error fetching employees for department:', error);
      res.status(500).send('Error fetching employees for department');
    });
});

// X√≥a nh√¢n vi√™n
app.post('/api/employees/delete', (req, res) => {
  const { name } = req.body;

  axios.post(`${EMPLOYEE_API_URL}/employees/delete`, { name })
    .then(response => {
      res.json({ message: 'Employee deleted successfully!' });
    })
    .catch(error => {
      console.error('Error deleting employee:', error);
      res.status(500).send('Error deleting employee');
    });
});
app.post('/api/auth/login', (req, res) => {
  const { id, password } = req.body;

  axios.post(`${AUTHENTICATION_API_URL}/authentication/login`, { id, password })
  .then(response => {
      console.log("üìå D·ªØ li·ªáu API tr·∫£ v·ªÅ:", response.data); // Debug API response

      const { token, role, name, department } = response.data;
      console.log("üìå T√™n nh√¢n vi√™n:", name); 
      console.log("üìå Ph√≤ng ban:", department);

      res.cookie('authToken', token, { httpOnly: true, maxAge: 3600000 });
      res.cookie('userRole', role, { maxAge: 3600000, path: '/' });
      if (role==='Account') {
        res.redirect('/salary.html?message=' + encodeURIComponent('Login successful!'));
        return;
      }
      if (role === 'employee') {
          res.redirect(`/Empoyee_Account.html?name=${encodeURIComponent(name)}&id=${encodeURIComponent(id)}&department=${encodeURIComponent(department)}`);
      } else {
          res.redirect('/add_employ.html?message=' + encodeURIComponent('Login successful!'));
      }
  })
  .catch(error => {
      console.error('‚ùå L·ªói ƒëƒÉng nh·∫≠p:', error);
      res.status(500).json({ error: 'Failed to log in' });
  });

});
// Route ƒë·ªÉ nh·∫≠n y√™u c·∫ßu check-in t·ª´ frontend
app.post('/checkin', async (req, res) => {
    const { name, id, checkInTime } = req.body;  // L·∫•y d·ªØ li·ªáu t·ª´ frontend g·ª≠i l√™n

    const attendanceData = {
        name,
        id,
        checkInTime
    };

    try {
        // G·ª≠i y√™u c·∫ßu POST t·ªõi personal-service ƒë·ªÉ ch·∫•m c√¥ng
        const response = await axios.post(`${PERSONAL_API_URL}/Personal/checkin`, attendanceData);
        
        // N·∫øu personal-service tr·∫£ k·∫øt qu·∫£ th√†nh c√¥ng, g·ª≠i ph·∫£n h·ªìi l·∫°i frontend
        if (response.status === 201) {
             res.status(201).json({ message: "Ch·∫•m c√¥ng th√†nh c√¥ng!" });
        } else {
            res.status(409).json({ error: "B·∫°n ƒë√£ ch·∫•m c√¥ng h√¥m nay r·ªìi !!" });
        }
    } catch (error) {
        console.error("L·ªói khi g·ªçi personal-service:", error);
        res.status(500).json({ error: "L·ªói khi ch·∫•m c√¥ng. Vui l√≤ng th·ª≠ l·∫°i." });
    }
});
// Route ƒë·ªÉ t√≠nh l∆∞∆°ng cho nh√¢n vi√™n
app.post('/calculate-salary', async (req, res) => {
    const { dailySalary } = req.body;  // L·∫•y l∆∞∆°ng 1 ng√†y t·ª´ frontend g·ª≠i l√™n

    if (!dailySalary) {
        return res.status(400).json({ error: 'L∆∞∆°ng 1 ng√†y kh√¥ng h·ª£p l·ªá' });
    }

    try {
        // G·ª≠i y√™u c·∫ßu GET t·ªõi salary-service ƒë·ªÉ l·∫•y d·ªØ li·ªáu nh√¢n vi√™n
        const response = await axios.get(`${SALARY_API_URL}/salary`);

        // Ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ salary-service
        if (response.status === 200 && Array.isArray(response.data)) {
            const salaryData = response.data.map(employee => {
                const totalSalary = employee.workDays * dailySalary;
                return {
                    name: employee.name,
                    workDays: employee.workDays,
                    totalSalary
                };
            });

            // Tr·∫£ d·ªØ li·ªáu l∆∞∆°ng ƒë√£ t√≠nh to√°n cho frontend
            res.json(salaryData);
        } else {
            res.status(500).json({ error: 'L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ salary-service' });
        }
    } catch (error) {
        console.error('L·ªói khi g·ªçi salary-service:', error);
        res.status(500).json({ error: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn salary-service' });
    }
});

// Ch·∫°y server
// Ch·∫°y server
app.listen(PORT, '0.0.0.0', () => {
  console.log(`Frontend service running on port ${PORT}`);
});
